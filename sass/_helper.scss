@mixin createPropertie($property, $rule) {
  #{$property}: $rule !important;
}

@mixin createUtility($propertieName, $initial, $utilityRules, $breakpoint) {
  @if (type-of($value: $utilityRules) !='list') {
    $utilityRules: ($utilityRules, '');
  }

  $variants: list.nth($utilityRules, 2);
  $utilityRules: list.nth($utilityRules, 1);

  $actualUtilitySeparator: $utilitySeparator;
  @if ($initial == "") {
    $actualUtilitySeparator: '';
  }

  @each $identifier, $rule in $utilityRules {
    .#{$utilityPrefix}#{$initial}#{$actualUtilitySeparator}#{$identifier}#{$breakpoint} {
      @include createPropertie($propertieName, $rule);
    }

    @if ($variants != null) {
      @each $variantIdentifier, $variantName in $variants {
        @if (type-of($value: $variantName) == 'list') {
          .#{$utilityPrefix}#{$initial}#{$variantIdentifier}#{$actualUtilitySeparator}#{$identifier} {
            @each $customVariant in $variantName {
              @include createPropertie(#{$propertieName}-#{$customVariant}, $rule);
            }
          }
        } @else {  
          .#{$utilityPrefix}#{$initial}#{$variantIdentifier}#{$actualUtilitySeparator}#{$identifier} {
            @include createPropertie(#{$propertieName}-#{$variantName}, $rule);
          }
        }
      } 
    }
  }
}


// Conversions
@function convert-unity($value, $destination) {
  @if ($destination == "rem" and math.unit($value) != "rem") {
    @return calc(($value / $defaultFontSize) * 1rem);
  }

  @if ($destination == "em" and math.unit($value) != "em") {
    @return calc(($value / $defaultFontSize) * 1em);
  }

  @if ($destination == "px" and math.unit($value) != "px") {
    @return calc(($value * $defaultFontSize) * 1px);
  }

  @return $value;
};

@function convertSpaceList($list, $measureUnit) {
  $newList: ();

  @each $spaceName, $spaceValue in $list {
    $newList: map.set($newList, $spaceName, convert-unity($spaceValue, $measureUnit))
  }

  $list: $newList;

  @return $list;
}


// Responsiveness helpers
// Inspired by https://raw.githubusercontent.com/sass-mq/sass-mq/main/_mq.scss
@function get-breakpoint-width($name, $breakpoints) {
  @if map.has-key($breakpoints, $name) {
    @return map.get($breakpoints, $name);
  }

  @else {
    @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
    @return null;
  }
}

@mixin mq($from: false) {
  $min-width: 0;
  $media-query: '';

  @if $from {
    @if type-of($from)==number {
      $min-width: convert-unity($from, 'em');
    }

    @else {
      $min-width: convert-unity(get-breakpoint-width($from, $breakpoints), 'em');
    }
  }

  @if $min-width !=0 {
    $media-query: '(min-width: #{$min-width})';
  }

  @media #{$media-query} {
    @content;
  }
}