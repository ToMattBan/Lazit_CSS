// Source https://raw.githubusercontent.com/sass-mq/sass-mq/main/_mq.scss
// Slighly modificated

@use 'sass:math';
@use 'sass:map';
@use 'sass:list';

$show-breakpoints: () !default;

$media-type: all !default;


@function px2em($px) {
  @if math.is-unitless($px) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
    @return px2em($px * 1px
  );
}

// if $px is compatible with em units, then return value unchanged
@if math.compatible($px, 1em) {
  @return $px;
}

@return math.div($px, 16px) * 1em;
}

@function get-breakpoint-width($name, $breakpoints) {
  @if map.has-key($breakpoints, $name) {
    @return map.get($breakpoints, $name);
  }

  @else {
    @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
    @return null;
  }
}

@mixin mq($from: false, $until: false, $and: false, $media-type: $media-type) {

  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from)==number {
      $min-width: px2em($from);
    }

    @else {
      $min-width: px2em(get-breakpoint-width($from, $breakpoints));
    }
  }

  // Until: that breakpoint (exclusive)
  @if $until {
    @if type-of($until)==number {
      $max-width: px2em($until);
    }

    @else {
      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - 0.01em;
    }
  }

  @if $min-width !=0 {
    $media-query: '#{$media-query} and (min-width: #{$min-width})';
  }

  @if $max-width !=0 {
    $media-query: '#{$media-query} and (max-width: #{$max-width})';
  }

  @if $and {
    $media-query: '#{$media-query} and #{$and}';
  }

  // Remove unnecessary media query prefix 'all and '
  @if ($media-type =='all' and $media-query !='') {
    $media-type: '';
    $media-query: str-slice(unquote($media-query), 6);
  }

  @media #{$media-type + $media-query} {
    @content;
  }
}